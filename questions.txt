OK, now let's talk about the final chapter: Intro to Event Driven Programming.

# For the slide (more discussion on concepts):
The code I want to show them:
```python
from tkinter import *


class Calculator:
    def __init__(self):
        self.win = Tk()
        self.win.title("Calculator")
        self.win.geometry("200x150")

        self.mainFrame = Frame(self.win)
        self.mainFrame.pack(padx=10, pady=10)

        self.createWidgets()

        self.win.mainloop()

    def createWidgets(self):
        lblNum1 = Label(self.mainFrame, text="Number 1:")
        lblNum1.pack()

        entryNum1 = Entry(self.mainFrame, width=20)
        entryNum1.pack()

        lblNum2 = Label(self.mainFrame, text="Number 2:")
        lblNum2.pack()

        entryNum2 = Entry(self.mainFrame, width=20)
        entryNum2.pack()

        lblResult = Label(self.mainFrame, text="Result:")
        lblResult.pack()

        btnMultiply = Button(self.mainFrame, text="Multiply")
        btnMultiply.pack(side="left")

        btnClear = Button(self.mainFrame, text="Close",
                          command=self.win.quit)
        btnClear.pack(side="right")
```
So for the slides I wanna first have a slide introducing the concept of Event Driven programming. Can you generate a PlantUML diagram that explains this with a generic example?
Also add some definitions for what Event Driven programming is and how it differs from what they have learned so far (procedural programming).

Then I want to show them the code above and explain how it works. I want to explain the concept of a callback function and how it is used in the Button widget (also what the command parameter is). I do want to explain how the Button widget is an example of an event and how it is handled by the mainloop() function.

As a small note, point out that we don't put brackets after quit (this is the name of the function to be called and we are not actually calling it here).

# For the worksheet:
The code I want to show them:
```python
from tkinter import *


class LoginApp:
    def __init__(self):
        self.win = Tk()
        self.win.title("Employee Login")
        self.win.geometry("250x100")

        self.mainFrame = Frame(self.win)
        self.mainFrame.grid(column=0, row=0)

        self.createWidgets()

        self.win.mainloop()

    def createWidgets(self):
        lblMessage = Label(self.mainFrame, width=30,
                           text="Enter username and password.")
        lblMessage.grid(column=0, row=0, columnspan=2)

        lblUserName = Label(self.mainFrame, text="Username:")
        lblUserName.grid(column=0, row=1)

        entryUserName = Entry(self.mainFrame, width=25)
        entryUserName.grid(column=1, row=1)

        lblPassword = Label(self.mainFrame, text="Password:")
        lblPassword.grid(column=0, row=2)

        entryPassword = Entry(self.mainFrame, width=25)
        entryPassword.grid(column=1, row=2)

        btnSignIn = Button(self.mainFrame, text="Sign In")
        btnSignIn.grid(column=0, row=3)

        btnCancel = Button(self.mainFrame, text="Cancel",
                           command=self.win.quit)
        btnCancel.grid(column=1, row=3)
```

Start with a very small introduction to event-driven programming. Then as a simple first example highlight that I have added the command parameter in btnCancel which now means that the button does something (say what it does in relation to the mainloop/event loop briefly).
Also say that we could use destroy method (tell them what is the difference) and add a small note about the fact that we are only naming the function not calling it.